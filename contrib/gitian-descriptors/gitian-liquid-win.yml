---
name: "liquid-win-0.18"
enable_cache: true
suites:
- "bionic"
architectures:
- "amd64"
packages:
- "curl"
- "g++"
- "git"
- "icnsutils"
- "imagemagick"
- "librsvg2-bin"
- "pkg-config"
- "autoconf"
- "libtool"
- "automake"
- "faketime"
- "bsdmainutils"
- "mingw-w64"
- "g++-mingw-w64"
- "nsis"
- "zip"
- "ca-certificates"
- "python"
- "rename"
remotes:
- "url": "https://github.com/ElementsProject/elements.git"
  "dir": "elements"
files:
- "librsvg2-2_2.40.13-3_amd64.deb"
script: |
  WRAP_DIR=$HOME/wrapped
  HOSTS="i686-w64-mingw32 x86_64-w64-mingw32"
  CONFIGFLAGS="--enable-reduce-exports --disable-bench --disable-gui-tests --enable-liquid"
  FAKETIME_HOST_PROGS="ar ranlib nm windres strip objcopy"
  FAKETIME_PROGS="date makensis zip"
  HOST_CFLAGS="-O2 -g"
  HOST_CXXFLAGS="-O2 -g"

  export QT_RCC_TEST=1
  export QT_RCC_SOURCE_DATE_OVERRIDE=1
  export GZIP="-9n"
  export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
  export TZ="UTC"
  export BUILD_DIR=`pwd`
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  ls librsvg*.deb || wget http://mirrors.kernel.org/ubuntu/pool/main/libr/librsvg/librsvg2-2_2.40.13-3_amd64.deb
  dpkg -x librsvg*.deb new-rsvg
  export LD_LIBRARY_PATH="$(echo $PWD/new-rsvg/usr/lib/*/)"

  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  function create_per-host_linker_wrapper {
  # This is only needed for trusty, as the mingw linker leaks a few bytes of
  # heap, causing non-determinism. See discussion in https://github.com/bitcoin/bitcoin/pull/6900
  for i in $HOSTS; do
    mkdir -p ${WRAP_DIR}/${i}
    for prog in collect2; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}/${prog}
        REAL=$(${i}-gcc -print-prog-name=${prog})
        echo "export MALLOC_PERTURB_=255" >> ${WRAP_DIR}/${i}/${prog}
        echo "${REAL} \$@" >> $WRAP_DIR/${i}/${prog}
        chmod +x ${WRAP_DIR}/${i}/${prog}
    done
    for prog in gcc g++; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "export COMPILER_PATH=${WRAP_DIR}/${i}" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_linker_wrapper "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  cd elements
  BASEPREFIX=`pwd`/depends
  # Build dependencies for each host
  for i in $HOSTS; do
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_linker_wrapper "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  # Create the release tarball using (arbitrarily) the first host
  ./autogen.sh
  CONFIG_SITE=${BASEPREFIX}/`echo "${HOSTS}" | awk '{print $1;}'`/share/config.site ./configure --prefix=/
  make dist
  SOURCEDIST=`echo elements-*.tar.gz`
  LIQUIDSOURCEDIST=`echo elements-*.tar.gz`
  LIQUIDSOURCEDIST=`echo ${LIQUIDSOURCEDIST} | sed 's/elements/liquid/'`
  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`
  DISTNAME=`echo ${DISTNAME} | sed 's/elements/liquid/'`

  # Correct tar file order
  mkdir -p temp
  pushd temp
  tar xf ../$SOURCEDIST
  find elements-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST
  mkdir -p $OUTDIR/src
  cp ../$SOURCEDIST $OUTDIR/src
  popd

  # Workaround for tarball not building with the bare tag version (prep)
  make -C src obj/build.h

  ORIGPATH="$PATH"
  # Extract the release tarball into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH=`pwd`/installed/${DISTNAME}
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf ../$SOURCEDIST

    # Workaround for tarball not building with the bare tag version
    echo '#!/bin/true' >share/genbuild.sh
    mkdir src/obj
    cp ../src/obj/build.h src/obj/

    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS="${HOST_CFLAGS}" CXXFLAGS="${HOST_CXXFLAGS}"
    make ${MAKEOPTS}
    make ${MAKEOPTS} -C src check-security
    make deploy
    make install DESTDIR=${INSTALLPATH}
    rename 's/-setup\.exe$/-setup-unsigned.exe/' *-setup.exe
    rename 's/elements-/liquid-/s' *-setup-unsigned.exe
    cp -f liquid-*setup*.exe $OUTDIR/
    cd installed

    mv ${DISTNAME}/bin/elements-qt.exe ${DISTNAME}/bin/liquid-qt.exe
    mv ${DISTNAME}/bin/elements-cli.exe ${DISTNAME}/bin/liquid-cli.exe
    mv ${DISTNAME}/bin/elementsd.exe ${DISTNAME}/bin/liquidd.exe
    mv ${DISTNAME}/bin/elements-tx.exe ${DISTNAME}/bin/liquid-tx.exe

    find ${DISTNAME}/bin -type f -executable -exec ${i}-objcopy --only-keep-debug {} {}.dbg \; -exec ${i}-strip -s {} \; -exec ${i}-objcopy --add-gnu-debuglink={}.dbg {} \;
    find ${DISTNAME} -not -name "*.dbg"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip
    find ${DISTNAME} -name "*.dbg"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}-debug.zip
    cd ../../
    rm -rf distsrc-${i}
  done
  cp -rf contrib/windeploy $BUILD_DIR
  cd $BUILD_DIR/windeploy
  mkdir unsigned
  cp $OUTDIR/liquid-*setup-unsigned.exe unsigned/
  cd unsigned
  cd ..
  find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz
  mv ${OUTDIR}/${DISTNAME}-x86_64-*-debug.zip ${OUTDIR}/${DISTNAME}-win64-debug.zip
  mv ${OUTDIR}/${DISTNAME}-i686-*-debug.zip ${OUTDIR}/${DISTNAME}-win32-debug.zip
  mv ${OUTDIR}/${DISTNAME}-x86_64-*.zip ${OUTDIR}/${DISTNAME}-win64.zip
  mv ${OUTDIR}/${DISTNAME}-i686-*.zip ${OUTDIR}/${DISTNAME}-win32.zip
