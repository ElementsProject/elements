.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.49.3.
.TH ELEMENTS-TX "1" "January 2025" "elements-tx v23.2.5" "User Commands"
.SH NAME
elements-tx \- manual page for elements-tx v23.2.5
.SH SYNOPSIS
.B elements-tx
[\fI\,options\/\fR] \fI\,<hex-tx> \/\fR[\fI\,commands\/\fR]  \fI\,Update hex-encoded Elements transaction\/\fR
.br
.B elements-tx
[\fI\,options\/\fR] \fI\,-create \/\fR[\fI\,commands\/\fR]   \fI\,Create hex-encoded Elements transaction\/\fR
.SH DESCRIPTION
Elements Core elements\-tx utility version v23.2.5
.SH OPTIONS
.HP
\-?
.IP
Print this help message and exit
.HP
\fB\-create\fR
.IP
Create new, empty TX.
.HP
\fB\-json\fR
.IP
Select JSON output
.HP
\fB\-txid\fR
.IP
Output only the hex\-encoded transaction id of the resultant transaction.
.HP
\fB\-version\fR
.IP
Print version and exit
.PP
Debugging/Testing options:
.PP
Chain selection options:
.HP
\fB\-chain=\fR<chain>
.IP
Use the chain <chain> (default: liquidv1). Reserved values: main, test,
signet, regtest, liquidv1, liquidv1test
.HP
\fB\-con_blockheightinheader\fR
.IP
Whether the chain includes the block height directly in the header, for
easier validation of block height in low\-resource environments.
(default: true)
.HP
\fB\-con_has_parent_chain\fR
.IP
Whether or not there is a parent chain.
.HP
\fB\-con_max_block_sig_size\fR
.IP
Max allowed witness data for the signed block header.
.HP
\fB\-con_parent_chain_signblockscript\fR
.IP
Whether parent chain uses pow or signed blocks. If the parent chain uses
signed blocks, the challenge (scriptPubKey) script. If not, an
empty string. (default: empty script [ie parent uses pow])
.HP
\fB\-con_parentpowlimit\fR
.IP
The proof\-of\-work limit value for the parent chain.
.HP
\fB\-con_signed_blocks\fR
.IP
Signed blockchain. Uses input of `\-signblockscript` to define what
signatures are necessary to solve it.
.HP
\fB\-fedpegscript\fR
.IP
The script for the federated peg enforce from genesis block. This script
may stop being enforced once dynamic federations activates.
.HP
\fB\-parentgenesisblockhash\fR
.IP
The genesis blockhash of the parent chain.
.HP
\fB\-signblockscript\fR
.IP
Signed blockchain enumberance. Only active when `\-con_signed_blocks` set
to true.
.HP
\fB\-signet\fR
.IP
Use the signet chain. Equivalent to \fB\-chain\fR=\fI\,signet\/\fR. Note that the network
is defined by the \fB\-signetchallenge\fR parameter
.HP
\fB\-signetchallenge\fR
.IP
Blocks must satisfy the given script to be considered valid (only for
signet networks; defaults to the global default signet test
network challenge)
.HP
\fB\-signetseednode\fR
.IP
Specify a seed node for the signet network, in the hostname[:port]
format, e.g. sig.net:1234 (may be used multiple times to specify
multiple seed nodes; defaults to the global default signet test
network seed node(s))
.HP
\fB\-testnet\fR
.IP
Use the test chain. Equivalent to \fB\-chain\fR=\fI\,test\/\fR.
.PP
Elements Options:
.HP
\fB\-con_blocksubsidy\fR
.IP
Defines the amount of block subsidy to start with, at genesis block, in
satoshis.
.HP
\fB\-con_connect_genesis_outputs\fR
.IP
Connect outputs in genesis block to utxo database.
.HP
\fB\-con_csv_deploy_start\fR
.IP
Starting height for CSV deployment. (default: \fB\-1\fR, which means ACTIVE
from genesis)
.HP
\fB\-con_dyna_deploy_signal\fR
.IP
Whether to signal for the Dynamic Federations deployment (default:
true).
.HP
\fB\-con_elementsmode\fR
.TP
Use Elements\-like instead of Core\-like witness encoding.
This is
.IP
required for CA/CT. (default: true)
.HP
\fB\-con_mandatorycoinbase\fR
.IP
All non\-zero valued coinbase outputs must go to this scriptPubKey, if
set.
.HP
\fB\-dynamic_epoch_length\fR
.IP
Per\-chain parameter that sets how many blocks dynamic federation voting
and enforcement are in effect for.
.HP
\fB\-enforce_pak\fR
.IP
Causes standardness checks to enforce Pegout Authorization Key(PAK)
validation before dynamic federations, and consensus enforcement
after.
.HP
\fB\-multi_data_permitted\fR
.IP
Allow relay of multiple OP_RETURN outputs. (default: \fB\-enforce_pak\fR)
.HP
\fB\-pak\fR
.IP
Sets the 'first extension space' field to the pak entries ala
pre\-dynamic federations. Only used for testing in custom chains.
.HP
\fB\-total_valid_epochs\fR
.IP
Per\-chain parameter that sets how long a particular fedpegscript is in
effect for.
.PP
Commands:
.IP
delin=N
.IP
Delete input N from TX
.IP
delout=N
.IP
Delete output N from TX
.IP
in=TXID:VOUT(:SEQUENCE_NUMBER)
.IP
Add input to TX
.IP
locktime=N
.IP
Set TX lock time to N
.IP
nversion=N
.IP
Set TX version to N
.IP
outaddr=VALUE:ADDRESS(:ASSET)
.IP
Add address\-based output to TX
.IP
outdata=[VALUE:]DATA
.IP
Add data\-based output to TX
.IP
outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]
.IP
Add Pay To n\-of\-m Multi\-sig output to TX. n = REQUIRED, m = PUBKEYS.
Optionally add the "W" flag to produce a
pay\-to\-witness\-script\-hash output. Optionally add the "S" flag to
wrap the output in a pay\-to\-script\-hash.
.IP
outpubkey=VALUE:PUBKEY[:FLAGS]
.IP
Add pay\-to\-pubkey output to TX. Optionally add the "W" flag to produce a
pay\-to\-witness\-pubkey\-hash output. Optionally add the "S" flag to
wrap the output in a pay\-to\-script\-hash.
.IP
outscript=VALUE:SCRIPT[:FLAGS]
.IP
Add raw script output to TX. Optionally add the "W" flag to produce a
pay\-to\-witness\-script\-hash output. Optionally add the "S" flag to
wrap the output in a pay\-to\-script\-hash.
.IP
replaceable(=N)
.IP
Set RBF opt\-in sequence number for input N (if not provided, opt\-in all
available inputs)
.IP
sign=SIGHASH\-FLAGS
.IP
Add zero or more signatures to transaction. This command requires JSON
registers:prevtxs=JSON object, privatekeys=JSON object. See
signrawtransactionwithkey docs for format of sighash flags, JSON
objects.
.PP
Register Commands:
.HP
\fB\-serialization\fR=\fI\,TYPE\/\fR
.IP
Sets the serialization of transactions. ELEMENTS or BITCOIN are the two
valid options.
.IP
load=NAME:FILENAME
.IP
Load JSON file FILENAME into register NAME
.IP
set=NAME:JSON\-STRING
.IP
Set register NAME to given JSON\-STRING
.SH COPYRIGHT
Copyright (C) 2009-2025 The Elements Project developers
Copyright (C) 2009-2025 The Bitcoin Core developers

Please contribute if you find Elements Core useful. Visit
<https://elementsproject.org/> for further information about the software.
The source code is available from
<https://github.com/ElementsProject/elements>.

This is experimental software.
Distributed under the MIT software license, see the accompanying file COPYING
or <https://opensource.org/licenses/MIT>