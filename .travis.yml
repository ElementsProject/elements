# The test build matrix (stage: test) is constructed to test a wide range of
# configurations, rather than a single pass/fail. This helps to catch build
# failures and logic errors that present on platforms other than the ones the
# author has tested.
#
# Some builders use the dependency-generator in `./depends`, rather than using
# apt-get to install build dependencies. This guarantees that the tester is
# using the same versions as Gitian, so the build results are nearly identical
# to what would be found in a final release.
#
# In order to avoid rebuilding all dependencies for each build, the binaries
# are cached and re-used when possible. Changes in the dependency-generator
# will trigger cache-invalidation and rebuilds as necessary.
#
# These caches can be manually removed if necessary. This is one of the very
# few manual operations that is possible with Travis, and it can be done by a
# Bitcoin Core GitHub member via the Travis web interface [0].
#
# Travis CI uploads the cache after the script phase of the build [1].
# However, the build is terminated without saving the chache if it takes over
# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail
# with an error and save the cache.
#
# [0] https://travis-ci.org/bitcoin/bitcoin/caches
# [1] https://docs.travis-ci.com/user/caching/#build-phases
# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts

dist: xenial
os: linux
language: minimal
cache:
  ccache: true
  directories:
    - depends/built
    - depends/sdk-sources
    - $HOME/.ccache
stages:
  - lint
  - test
env:
  global:
    - MAKEJOBS=-j3
    - RUN_UNIT_TESTS=true
    - RUN_FUNCTIONAL_TESTS=true
    - RUN_FUZZ_TESTS=false
    - DOCKER_NAME_TAG=ubuntu:18.04
    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID
    - CCACHE_SIZE=100M
    - CCACHE_TEMPDIR=/tmp/.ccache-temp
    - CCACHE_COMPRESS=1
    - CCACHE_DIR=$HOME/.ccache
    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out
    - SDK_URL=https://bitcoincore.org/depends-sources/sdks
    - COMMON_PACKAGES="icnsutils librsvg2-bin imagemagick"
    - WINEDEBUG=fixme-all
    - DOCKER_PACKAGES="build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache"
    - CACHE_ERR_MSG="Error! Initial build successful, but not enough time remains to run later build stages and tests. Please manually re-run this job by using the travis restart button or asking a bitcoin maintainer to restart. The next run should not time out because the build cache has been saved."
before_install:
  - set -o errexit; source .travis/test_03_before_install.sh
install:
  - set -o errexit; source .travis/test_04_install.sh
before_script:
  - set -o errexit; source .travis/test_05_before_script.sh
script:
  - export CONTINUE=1
  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long
  - if [ $CONTINUE = "1" ]; then set -o errexit; travis_wait 30 source .travis/test_06_script_a.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
  - if [ $SECONDS -gt 1800 ]; then export CONTINUE=0; fi  # Likely the build took very long
  - if [ $CONTINUE = "1" ]; then set -o errexit; travis_wait 30 source .travis/test_06_script_b.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
after_script:
  - echo $TRAVIS_COMMIT_RANGE
  - echo $TRAVIS_COMMIT_LOG
jobs:
  include:

    - stage: lint
      name: 'lint'
      env:
      cache: false
      language: python
      python: '3.4' # Oldest supported version according to doc/dependencies.md
      install:
        - set -o errexit; source .travis/lint_04_install.sh
      before_script:
        - set -o errexit; source .travis/lint_05_before_script.sh
      script:
        - set -o errexit; source .travis/lint_06_script.sh

    - stage: test
      name: 'ARM  [GOAL: install]  [no unit or functional tests]'
      env: >-
        HOST=arm-linux-gnueabihf
        PACKAGES="python3 g++-arm-linux-gnueabihf"
        RUN_UNIT_TESTS=false
        RUN_FUNCTIONAL_TESTS=false
        GOAL="install"
        # -Wno-psabi is to disable ABI warnings: "note: parameter passing for argument of type ... changed in GCC 7.1"
        # This could be removed once the ABI change warning does not show up by default
        BITCOIN_CONFIG="--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi"

    - stage: test
      name: 'Win32  [GOAL: deploy]  [no gui or functional tests]'
      env: >-
        HOST=i686-w64-mingw32
        DPKG_ADD_ARCH="i386"
        PACKAGES="python3 nsis g++-mingw-w64-i686 wine-binfmt wine32"
        RUN_FUNCTIONAL_TESTS=false
        GOAL="deploy"
        BITCOIN_CONFIG="--enable-reduce-exports --disable-gui-tests"
        RUN_UNIT_TESTS=false # secp-zkp times out Travis, get 32-bit build in upstream?
# Win64
    - stage: test
      name: 'Win64  [GOAL: deploy]  [no gui or functional tests]'
      env: >-
        HOST=x86_64-w64-mingw32
        PACKAGES="python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64"
        RUN_FUNCTIONAL_TESTS=false
        GOAL="deploy"
        BITCOIN_CONFIG="--enable-reduce-exports --disable-gui-tests"

    - stage: test
      name: '32-bit + dash  [GOAL: install]  [GUI: no BIP70]'
      env: >-
        HOST=i686-pc-linux-gnu
        PACKAGES="g++-multilib python3-zmq"
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --disable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++"
        CONFIG_SHELL="/bin/dash"
        RUN_UNIT_TESTS=false # secp-zkp times out Travis, get 32-bit build in upstream?
# x86_64 Linux (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout), no functional tests
    - stage: test
      env: >-
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev"
        DEP_OPTS="NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1"
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\"-g0 -O2\""
        RUN_FUNCTIONAL_TESTS=false
# x86_64 Linux (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout), no unit tests
    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package instead of depends Qt to speed up build and avoid timeout]'
      env: >-
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev"
        DEP_OPTS="NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1"
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\"-g0 -O2\""
        RUN_UNIT_TESTS=false
# x86_64 Linux (xenial, no depends, only system libs)
    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'
      env: >-
        HOST=x86_64-unknown-linux-gnu
        DOCKER_NAME_TAG=ubuntu:16.04
        PACKAGES="clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev"
        NO_DEPENDS=1
        RUN_FUNCTIONAL_TESTS=false
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++"

    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer]'
      env: >-
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev"
        NO_DEPENDS=1
        RUN_FUNCTIONAL_TESTS=false
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=integer,undefined CC=clang CXX=clang++"
# x86_64 Linux, No wallet, no QT(build timing out with for some reason)
    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'
      env: >-
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="python3"
        DEP_OPTS="NO_WALLET=1 NO_QT=1"
        GOAL="install"
        BITCOIN_CONFIG="--enable-glibc-back-compat --enable-reduce-exports"

    - stage: test
      name: 'macOS 10.10  [GOAL: deploy] [no functional tests]'
      env: >-
        HOST=x86_64-apple-darwin14
        PACKAGES="cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev python3-setuptools-git"
        OSX_SDK=10.11
        RUN_UNIT_TESTS=false
        RUN_FUNCTIONAL_TESTS=false
        GOAL="deploy"
        BITCOIN_CONFIG="--enable-gui --enable-reduce-exports --enable-werror"

# x86_64 Linux w/ Bitcoin functional tests (Qt5 & system libs)
    - stage: test
      env: >-
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev"
        NO_DEPENDS=1
        RUN_UNIT_TESTS=false
        RUN_BITCOIN_TESTS=true
        RUN_FUNCTIONAL_TESTS=false
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER"

# x86_64 Linux w/ single fedpeg test that uses upstream bitcoind as mainchain
    - stage: test
      env: >-
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev"
        NO_DEPENDS=1
        RUN_UNIT_TESTS=false
        RUN_BITCOIN_TESTS=false
        RUN_FUNCTIONAL_TESTS=false
        RUN_FEDPEG_BITCOIND_TEST=true
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=no --disable-tests --disable-bench CPPFLAGS=-DDEBUG_LOCKORDER"
# x86_64 Linux (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout), no functional tests, LIQUID BUILD
    - stage: test
      env: >-
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev"
        DEP_OPTS="NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1"
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug --enable-liquid CXXFLAGS=\"-g0 -O2\""
        RUN_FUNCTIONAL_TESTS=false

